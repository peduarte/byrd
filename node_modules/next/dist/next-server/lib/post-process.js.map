{"version":3,"sources":["../../../next-server/lib/post-process.ts"],"names":["MIDDLEWARE_TIME_BUDGET","middlewareRegistry","registerPostProcessor","name","middleware","condition","push","processHTML","html","data","options","postProcessData","preloads","images","root","document","callMiddleWare","timer","Date","now","inspect","inspectTime","mutate","console","warn","i","length","FontOptimizerMiddleware","fontDefinitions","markup","_data","result","getFontDefinition","key","url","indexOf","fontContent","replace","originalDom","querySelectorAll","filter","tag","getAttribute","hasAttribute","OPTIMIZED_FONT_PROVIDERS","some","startsWith","forEach","element","optimizeFonts","process","env","__NEXT_OPTIMIZE_FONTS"],"mappings":"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","sourcesContent":["import { parse, HTMLElement } from 'node-html-parser'\nimport { OPTIMIZED_FONT_PROVIDERS } from './constants'\n\nconst MIDDLEWARE_TIME_BUDGET = 10\n\ntype postProcessOptions = {\n  optimizeFonts: boolean\n}\n\ntype renderOptions = {\n  getFontDefinition?: (url: string) => string\n}\n\ntype postProcessData = {\n  preloads: {\n    images: Array<string>\n  }\n}\n\ninterface PostProcessMiddleware {\n  inspect: (\n    originalDom: HTMLElement,\n    data: postProcessData,\n    options: renderOptions\n  ) => void\n  mutate: (\n    markup: string,\n    data: postProcessData,\n    options: renderOptions\n  ) => Promise<string>\n}\n\ntype middlewareSignature = {\n  name: string\n  middleware: PostProcessMiddleware\n  condition: ((options: postProcessOptions) => boolean) | null\n}\n\nconst middlewareRegistry: Array<middlewareSignature> = []\n\nfunction registerPostProcessor(\n  name: string,\n  middleware: PostProcessMiddleware,\n  condition?: (options: postProcessOptions) => boolean\n) {\n  middlewareRegistry.push({ name, middleware, condition: condition || null })\n}\n\nasync function processHTML(\n  html: string,\n  data: renderOptions,\n  options: postProcessOptions\n): Promise<string> {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html\n  }\n  const postProcessData: postProcessData = {\n    preloads: {\n      images: [],\n    },\n  }\n  const root: HTMLElement = parse(html)\n  let document = html\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(\n    middleware: PostProcessMiddleware,\n    name: string\n  ) {\n    let timer = Date.now()\n    middleware.inspect(root, postProcessData, data)\n    const inspectTime = Date.now() - timer\n    document = await middleware.mutate(document, postProcessData, data)\n    timer = Date.now() - timer\n    if (timer > MIDDLEWARE_TIME_BUDGET) {\n      console.warn(\n        `The postprocess middleware \"${name}\" took ${timer}ms(${inspectTime}, ${\n          timer - inspectTime\n        }) to complete. This is longer than the ${MIDDLEWARE_TIME_BUDGET} limit.`\n      )\n    }\n    return\n  }\n\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i]\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(\n        middlewareRegistry[i].middleware,\n        middlewareRegistry[i].name\n      )\n    }\n  }\n\n  return document\n}\n\nclass FontOptimizerMiddleware implements PostProcessMiddleware {\n  fontDefinitions: Array<string> = []\n  inspect(\n    originalDom: HTMLElement,\n    _data: postProcessData,\n    options: renderOptions\n  ) {\n    if (!options.getFontDefinition) {\n      return\n    }\n    // collecting all the requested font definitions\n    originalDom\n      .querySelectorAll('link')\n      .filter(\n        (tag: HTMLElement) =>\n          tag.getAttribute('rel') === 'stylesheet' &&\n          tag.hasAttribute('data-href') &&\n          OPTIMIZED_FONT_PROVIDERS.some((url) =>\n            tag.getAttribute('data-href').startsWith(url)\n          )\n      )\n      .forEach((element: HTMLElement) => {\n        const url = element.getAttribute('data-href')\n        this.fontDefinitions.push(url)\n      })\n  }\n  mutate = async (\n    markup: string,\n    _data: postProcessData,\n    options: renderOptions\n  ) => {\n    let result = markup\n    if (!options.getFontDefinition) {\n      return markup\n    }\n    for (const key in this.fontDefinitions) {\n      const url = this.fontDefinitions[key]\n      if (result.indexOf(`<style data-href=\"${url}\">`) > -1) {\n        // The font is already optimized and probably the response is cached\n        continue\n      }\n      const fontContent = options.getFontDefinition(url)\n      result = result.replace(\n        '</head>',\n        `<style data-href=\"${url}\">${fontContent.replace(\n          /(\\n|\\s)/g,\n          ''\n        )}</style></head>`\n      )\n    }\n    return result\n  }\n}\n\n// Initialization\nregisterPostProcessor(\n  'Inline-Fonts',\n  new FontOptimizerMiddleware(),\n  // Using process.env because passing Experimental flag through loader is not possible.\n  // @ts-ignore\n  (options) => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS\n)\n\nexport default processHTML\n"]}