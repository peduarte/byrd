{"version":3,"sources":["../../../../next-server/server/lib/path-match.ts"],"names":["customRoute","path","keys","matcherOptions","sensitive","delimiter","strict","undefined","decode","decodeParam","matcherRegex","pathToRegexp","matcher","regexpToFunction","pathname","params","res","key","name","param","decodeURIComponent","_","err","Error","code"],"mappings":"iFAAA,uF,o2BAIe,CAACA,WAAW,CAAG,KAAf,GAAyB,CACtC,MAAQC,CAAAA,IAAD,EAAkB,CACvB,KAAMC,CAAAA,IAAwB,CAAG,EAAjC,CACA,KAAMC,CAAAA,cAAc,CAAG,CACrBC,SAAS,CAAE,KADU,CAErBC,SAAS,CAAE,GAFU,CAGrB,IAAIL,WAAW,CAAG,CAAEM,MAAM,CAAE,IAAV,CAAH,CAAsBC,SAArC,CAHqB,CAIrBC,MAAM,CAAEC,WAJa,CAAvB,CAMA,KAAMC,CAAAA,YAAY,CAAGC,YAAY,CAACA,YAAb,CAA0BV,IAA1B,CAAgCC,IAAhC,CAAsCC,cAAtC,CAArB,CACA,KAAMS,CAAAA,OAAO,CAAGD,YAAY,CAACE,gBAAb,CACdH,YADc,CAEdR,IAFc,CAGdC,cAHc,CAAhB,CAMA,MAAO,CAACW,QAAD,CAAsCC,MAAtC,GAAuD,CAC5D,KAAMC,CAAAA,GAAG,CAAGF,QAAQ,EAAI,IAAZ,CAAmB,KAAnB,CAA2BF,OAAO,CAACE,QAAD,CAA9C,CACA,GAAI,CAACE,GAAL,CAAU,CACR,MAAO,MAAP,CACD,CAED,GAAIhB,WAAJ,CAAiB,CACf,IAAK,KAAMiB,CAAAA,GAAX,GAAkBf,CAAAA,IAAlB,CAAwB,CACtB;AACA;AACA,GAAI,MAAOe,CAAAA,GAAG,CAACC,IAAX,GAAoB,QAAxB,CAAkC,CAChC,MAAQF,CAAAA,GAAG,CAACD,MAAL,CAAoBE,GAAG,CAACC,IAAxB,CAAP,CACD,CACF,CACF,CAED,MAAO,CAAE,GAAGH,MAAL,CAAa,GAAGC,GAAG,CAACD,MAApB,CAAP,CACD,CAjBD,CAkBD,CAjCD,CAkCD,C,0BAED,QAASN,CAAAA,WAAT,CAAqBU,KAArB,CAAoC,CAClC,GAAI,CACF,MAAOC,CAAAA,kBAAkB,CAACD,KAAD,CAAzB,CACD,CAAC,MAAOE,CAAP,CAAU,CACV,KAAMC,CAAAA,GAA8B,CAAG,GAAIC,CAAAA,KAAJ,CAAU,wBAAV,CAAvC,CACAD,GAAG,CAACE,IAAJ,CAAW,eAAX,CACA,KAAMF,CAAAA,GAAN,CACD,CACF","sourcesContent":["import * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\n\nexport { pathToRegexp }\n\nexport default (customRoute = false) => {\n  return (path: string) => {\n    const keys: pathToRegexp.Key[] = []\n    const matcherOptions = {\n      sensitive: false,\n      delimiter: '/',\n      ...(customRoute ? { strict: true } : undefined),\n      decode: decodeParam,\n    }\n    const matcherRegex = pathToRegexp.pathToRegexp(path, keys, matcherOptions)\n    const matcher = pathToRegexp.regexpToFunction(\n      matcherRegex,\n      keys,\n      matcherOptions\n    )\n\n    return (pathname: string | null | undefined, params?: any) => {\n      const res = pathname == null ? false : matcher(pathname)\n      if (!res) {\n        return false\n      }\n\n      if (customRoute) {\n        for (const key of keys) {\n          // unnamed params should be removed as they\n          // are not allowed to be used in the destination\n          if (typeof key.name === 'number') {\n            delete (res.params as any)[key.name]\n          }\n        }\n      }\n\n      return { ...params, ...res.params }\n    }\n  }\n}\n\nfunction decodeParam(param: string) {\n  try {\n    return decodeURIComponent(param)\n  } catch (_) {\n    const err: Error & { code?: string } = new Error('failed to decode param')\n    err.code = 'DECODE_FAILED'\n    throw err\n  }\n}\n"]}