{"version":3,"sources":["../../build/spinner.ts"],"names":["dotsSpinner","frames","interval","createSpinner","text","options","spinner","prefixText","process","stdout","isTTY","undefined","stream","start","origLog","console","log","origWarn","warn","origError","error","origStop","stop","bind","origStopAndPersist","stopAndPersist","logHandle","method","args","resetLog"],"mappings":"mEAAA,mE,mFAEA,KAAMA,CAAAA,WAAW,CAAG,CAClBC,MAAM,CAAE,CAAC,GAAD,CAAM,IAAN,CAAY,KAAZ,CADU,CAElBC,QAAQ,CAAE,GAFQ,CAApB,CAKe,QAASC,CAAAA,aAAT,CACbC,IADa,CAEbC,OAAoB,CAAG,EAFV,CAGb,CACA,GAAIC,CAAAA,OAAJ,CACA,GAAIC,CAAAA,UAAU,CAAGH,IAAI,EAAI,MAAOA,CAAAA,IAAP,GAAgB,QAAxB,EAAoCA,IAAI,CAACG,UAA1D,CAEA,GAAIC,OAAO,CAACC,MAAR,CAAeC,KAAnB,CAA0B,CACxBJ,OAAO,CAAG,iBAAI,CACZF,IAAI,CAAE,MAAOA,CAAAA,IAAP,GAAgB,QAAhB,CAA2BA,IAA3B,CAAkCO,SAD5B,CAEZJ,UAAU,CAAE,MAAOA,CAAAA,UAAP,GAAsB,QAAtB,CAAiCA,UAAjC,CAA8CI,SAF9C,CAGZL,OAAO,CAAEN,WAHG,CAIZY,MAAM,CAAEJ,OAAO,CAACC,MAJJ,CAKZ,GAAGJ,OALS,CAAJ,EAMPQ,KANO,EAAV,CAQA;AACA;AACA,KAAMC,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAxB,CACA,KAAMC,CAAAA,QAAQ,CAAGF,OAAO,CAACG,IAAzB,CACA,KAAMC,CAAAA,SAAS,CAAGJ,OAAO,CAACK,KAA1B,CACA,KAAMC,CAAAA,QAAQ,CAAGf,OAAO,CAACgB,IAAR,CAAaC,IAAb,CAAkBjB,OAAlB,CAAjB,CACA,KAAMkB,CAAAA,kBAAkB,CAAGlB,OAAO,CAACmB,cAAR,CAAuBF,IAAvB,CAA4BjB,OAA5B,CAA3B,CAEA,KAAMoB,CAAAA,SAAS,CAAG,CAACC,MAAD,CAAcC,IAAd,GAA8B,CAC9CP,QAAQ,GACRM,MAAM,CAAC,GAAGC,IAAJ,CAAN,CACAtB,OAAO,CAAEO,KAAT,GACD,CAJD,CAMAE,OAAO,CAACC,GAAR,CAAc,CAAC,GAAGY,IAAJ,GAAkBF,SAAS,CAACZ,OAAD,CAAUc,IAAV,CAAzC,CACAb,OAAO,CAACG,IAAR,CAAe,CAAC,GAAGU,IAAJ,GAAkBF,SAAS,CAACT,QAAD,CAAWW,IAAX,CAA1C,CACAb,OAAO,CAACK,KAAR,CAAgB,CAAC,GAAGQ,IAAJ,GAAkBF,SAAS,CAACP,SAAD,CAAYS,IAAZ,CAA3C,CAEA,KAAMC,CAAAA,QAAQ,CAAG,IAAM,CACrBd,OAAO,CAACC,GAAR,CAAcF,OAAd,CACAC,OAAO,CAACG,IAAR,CAAeD,QAAf,CACAF,OAAO,CAACK,KAAR,CAAgBD,SAAhB,CACD,CAJD,CAKAb,OAAO,CAACgB,IAAR,CAAe,IAAe,CAC5BD,QAAQ,GACRQ,QAAQ,GACR,MAAOvB,CAAAA,OAAP,CACD,CAJD,CAKAA,OAAO,CAACmB,cAAR,CAAyB,IAAe,CACtCD,kBAAkB,GAClBK,QAAQ,GACR,MAAOvB,CAAAA,OAAP,CACD,CAJD,CAKD,CA1CD,IA0CO,IAAIC,UAAU,EAAIH,IAAlB,CAAwB,CAC7BW,OAAO,CAACC,GAAR,CAAYT,UAAU,CAAGA,UAAU,CAAG,KAAhB,CAAwBH,IAA9C,EACD,CAED,MAAOE,CAAAA,OAAP,CACD","sourcesContent":["import ora from 'next/dist/compiled/ora'\n\nconst dotsSpinner = {\n  frames: ['.', '..', '...'],\n  interval: 200,\n}\n\nexport default function createSpinner(\n  text: string | { prefixText: string },\n  options: ora.Options = {}\n) {\n  let spinner: undefined | ora.Ora\n  let prefixText = text && typeof text === 'object' && text.prefixText\n\n  if (process.stdout.isTTY) {\n    spinner = ora({\n      text: typeof text === 'string' ? text : undefined,\n      prefixText: typeof prefixText === 'string' ? prefixText : undefined,\n      spinner: dotsSpinner,\n      stream: process.stdout,\n      ...options,\n    }).start()\n\n    // Add capturing of console.log/warn/error to allow pausing\n    // the spinner before logging and then restarting spinner after\n    const origLog = console.log\n    const origWarn = console.warn\n    const origError = console.error\n    const origStop = spinner.stop.bind(spinner)\n    const origStopAndPersist = spinner.stopAndPersist.bind(spinner)\n\n    const logHandle = (method: any, args: any[]) => {\n      origStop()\n      method(...args)\n      spinner!.start()\n    }\n\n    console.log = (...args: any) => logHandle(origLog, args)\n    console.warn = (...args: any) => logHandle(origWarn, args)\n    console.error = (...args: any) => logHandle(origError, args)\n\n    const resetLog = () => {\n      console.log = origLog\n      console.warn = origWarn\n      console.error = origError\n    }\n    spinner.stop = (): ora.Ora => {\n      origStop()\n      resetLog()\n      return spinner!\n    }\n    spinner.stopAndPersist = (): ora.Ora => {\n      origStopAndPersist()\n      resetLog()\n      return spinner!\n    }\n  } else if (prefixText || text) {\n    console.log(prefixText ? prefixText + '...' : text)\n  }\n\n  return spinner\n}\n"]}