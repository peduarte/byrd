{"version":3,"sources":["../../../../build/babel/plugins/next-data.ts"],"names":["types","t","visitor","ImportDeclaration","path","state","source","node","value","createHookSpecifier","get","find","specifier","isImportSpecifier","imported","name","bindingName","local","binding","scope","getBinding","referencePaths","forEach","refPath","callExpression","parentPath","isCallExpression","args","buildCodeFrameError","arguments","push","objectExpression","properties","objectProperty","identifier","stringLiteral","opts","key"],"mappings":"8DAEe,kBAAU,CACvBA,KAAK,CAAEC,CADgB,CAAV,CAII,CACjB,MAAO,CACLC,OAAO,CAAE,CACPC,iBAAiB,CAACC,IAAD,CAA+CC,KAA/C,CAAsD,CACrE,KAAMC,CAAAA,MAAM,CAAGF,IAAI,CAACG,IAAL,CAAUD,MAAV,CAAiBE,KAAhC,CACA,GAAIF,MAAM,GAAK,WAAf,CAA4B,OAE5B,KAAMG,CAAAA,mBAAmB,CAAGL,IAAI,CAACM,GAAL,CAAS,YAAT,EAAuBC,IAAvB,CAA6BC,SAAD,EAAe,CACrE,MACEA,CAAAA,SAAS,CAACC,iBAAV,IACAD,SAAS,CAACL,IAAV,CAAeO,QAAf,CAAwBC,IAAxB,GAAiC,YAFnC,CAID,CAL2B,CAA5B,CAOA,GAAI,CAACN,mBAAL,CAA0B,OAE1B,KAAMO,CAAAA,WAAW,CAAGP,mBAAmB,CAACF,IAApB,CAAyBU,KAAzB,CAA+BF,IAAnD,CACA,KAAMG,CAAAA,OAAO,CAAGd,IAAI,CAACe,KAAL,CAAWC,UAAX,CAAsBJ,WAAtB,CAAhB,CAEA,GAAI,CAACE,OAAL,CAAc,CACZ,OACD,CAEDA,OAAO,CAACG,cAAR,CAAuBC,OAAvB,CAAgCC,OAAD,EAAa,CAC1C,GAAIC,CAAAA,cAAc,CAAGD,OAAO,CAACE,UAA7B,CAEA,GAAI,CAACD,cAAc,CAACE,gBAAf,EAAL,CAAwC,OAExC,GAAIC,CAAAA,IAAS,CAAGH,cAAc,CAACd,GAAf,CAAmB,WAAnB,CAAhB,CAEA,GAAI,CAACiB,IAAI,CAAC,CAAD,CAAT,CAAc,CACZ,KAAMH,CAAAA,cAAc,CAACI,mBAAf,CACJ,mDADI,CAAN,CAGD,CAED,GAAI,CAACD,IAAI,CAAC,CAAD,CAAT,CAAc,CACZH,cAAc,CAACjB,IAAf,CAAoBsB,SAApB,CAA8BC,IAA9B,CAAmC7B,CAAC,CAAC8B,gBAAF,CAAmB,EAAnB,CAAnC,EACD,CAEDJ,IAAI,CAAGH,cAAc,CAACd,GAAf,CAAmB,WAAnB,CAAP,CAEAiB,IAAI,CAAC,CAAD,CAAJ,CAAQpB,IAAR,CAAayB,UAAb,CAAwBF,IAAxB,CACE7B,CAAC,CAACgC,cAAF,CACEhC,CAAC,CAACiC,UAAF,CAAa,KAAb,CADF,CAEEjC,CAAC,CAACkC,aAAF,CAAgB9B,KAAK,CAAC+B,IAAN,CAAWC,GAA3B,CAFF,CADF,EAMD,CAzBD,EA0BD,CA/CM,CADJ,CAAP,CAmDD","sourcesContent":["import { NodePath, PluginObj, types as BabelTypes } from '@babel/core'\n\nexport default function ({\n  types: t,\n}: {\n  types: typeof BabelTypes\n}): PluginObj<any> {\n  return {\n    visitor: {\n      ImportDeclaration(path: NodePath<BabelTypes.ImportDeclaration>, state) {\n        const source = path.node.source.value\n        if (source !== 'next/data') return\n\n        const createHookSpecifier = path.get('specifiers').find((specifier) => {\n          return (\n            specifier.isImportSpecifier() &&\n            specifier.node.imported.name === 'createHook'\n          )\n        })\n\n        if (!createHookSpecifier) return\n\n        const bindingName = createHookSpecifier.node.local.name\n        const binding = path.scope.getBinding(bindingName)\n\n        if (!binding) {\n          return\n        }\n\n        binding.referencePaths.forEach((refPath) => {\n          let callExpression = refPath.parentPath\n\n          if (!callExpression.isCallExpression()) return\n\n          let args: any = callExpression.get('arguments')\n\n          if (!args[0]) {\n            throw callExpression.buildCodeFrameError(\n              'first argument to createHook should be a function'\n            )\n          }\n\n          if (!args[1]) {\n            callExpression.node.arguments.push(t.objectExpression([]))\n          }\n\n          args = callExpression.get('arguments')\n\n          args[1].node.properties.push(\n            t.objectProperty(\n              t.identifier('key'),\n              t.stringLiteral(state.opts.key)\n            )\n          )\n        })\n      },\n    },\n  }\n}\n"]}