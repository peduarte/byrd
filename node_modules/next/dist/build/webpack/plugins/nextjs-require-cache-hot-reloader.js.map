{"version":3,"sources":["../../../../build/webpack/plugins/nextjs-require-cache-hot-reloader.ts"],"names":["isWebpack5","parseInt","version","deleteCache","filePath","require","cache","e","code","PLUGIN_NAME","NextJsRequireCacheHotReloader","prevAssets","previousOutputPathsWebpack5","Set","currentOutputPathsWebpack5","apply","compiler","hooks","assetEmitted","tap","_file","targetPath","add","afterEmit","compilation","runtimeChunkPath","path","join","outputOptions","outputPath","has","clear","tapAsync","callback","assets","f","Object","keys","existsAt"],"mappings":"kFAAA,gCACA,sBACA,kD,mFAEA,KAAMA,CAAAA,UAAU,CAAGC,QAAQ,CAACC,gBAAD,CAAR,GAAuB,CAA1C,CAEA,QAASC,CAAAA,WAAT,CAAqBC,QAArB,CAAuC,CACrC,GAAI,CACF,MAAOC,CAAAA,OAAO,CAACC,KAAR,CAAc,qBAAaF,QAAb,CAAd,CAAP,CACD,CAAC,MAAOG,CAAP,CAAU,CACV,GAAIA,CAAC,CAACC,IAAF,GAAW,QAAf,CAAyB,KAAMD,CAAAA,CAAN,CAC1B,CAJD,OAIU,CACR,MAAOF,CAAAA,OAAO,CAACC,KAAR,CAAcF,QAAd,CAAP,CACD,CACF,CAED,KAAMK,CAAAA,WAAW,CAAG,+BAApB,CAEA;AACO,KAAMC,CAAAA,6BAAgD,oBAC3DC,UAD2D,CACzC,IADyC,MAE3DC,2BAF2D,CAEhB,GAAIC,CAAAA,GAAJ,EAFgB,MAG3DC,0BAH2D,CAGjB,GAAID,CAAAA,GAAJ,EAHiB,EAK3DE,KAAK,CAACC,QAAD,CAAqB,CACxB,GAAIhB,UAAJ,CAAgB,CACd;AACAgB,QAAQ,CAACC,KAAT,CAAeC,YAAf,CAA4BC,GAA5B,CACEV,WADF,CAEE,CAACW,KAAD,CAAa,CAAEC,UAAF,CAAb,GAAqC,CACnC,KAAKP,0BAAL,CAAgCQ,GAAhC,CAAoCD,UAApC,EACAlB,WAAW,CAACkB,UAAD,CAAX,CACD,CALH,EAQAL,QAAQ,CAACC,KAAT,CAAeM,SAAf,CAAyBJ,GAAzB,CAA6BV,WAA7B,CAA2Ce,WAAD,EAAiB,CACzD,KAAMC,CAAAA,gBAAgB,CAAGC,cAAKC,IAAL,CACvBH,WAAW,CAACI,aAAZ,CAA0BF,IADH,CAEvB,oBAFuB,CAAzB,CAKAvB,WAAW,CAACsB,gBAAD,CAAX,CAEA,IAAK,KAAMI,CAAAA,UAAX,GAAyB,MAAKjB,2BAA9B,CAA2D,CACzD,GAAI,CAAC,KAAKE,0BAAL,CAAgCgB,GAAhC,CAAoCD,UAApC,CAAL,CAAsD,CACpD1B,WAAW,CAAC0B,UAAD,CAAX,CACD,CACF,CAED,KAAKjB,2BAAL,CAAmC,GAAIC,CAAAA,GAAJ,CACjC,KAAKC,0BAD4B,CAAnC,CAGA,KAAKA,0BAAL,CAAgCiB,KAAhC,GACD,CAlBD,EAmBA,OACD,CAEDf,QAAQ,CAACC,KAAT,CAAeM,SAAf,CAAyBS,QAAzB,CAAkCvB,WAAlC,CAA+C,CAACe,WAAD,CAAcS,QAAd,GAA2B,CACxE,KAAM,CAAEC,MAAF,EAAaV,WAAnB,CAEA,GAAI,KAAKb,UAAT,CAAqB,CACnB,IAAK,KAAMwB,CAAAA,CAAX,GAAgBC,CAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAhB,CAAqC,CACnC/B,WAAW,CAAC+B,MAAM,CAACC,CAAD,CAAN,CAAUG,QAAX,CAAX,CACD,CACD,IAAK,KAAMH,CAAAA,CAAX,GAAgBC,CAAAA,MAAM,CAACC,IAAP,CAAY,KAAK1B,UAAjB,CAAhB,CAA8C,CAC5C,GAAI,CAACuB,MAAM,CAACC,CAAD,CAAX,CAAgB,CACdhC,WAAW,CAAC,KAAKQ,UAAL,CAAgBwB,CAAhB,EAAmBG,QAApB,CAAX,CACD,CACF,CACF,CACD,KAAK3B,UAAL,CAAkBuB,MAAlB,CAEAD,QAAQ,GACT,CAhBD,EAiBD,CAvD0D,C","sourcesContent":["import { Compiler, Plugin, version } from 'webpack'\nimport { realpathSync } from 'fs'\nimport path from 'path'\n\nconst isWebpack5 = parseInt(version!) === 5\n\nfunction deleteCache(filePath: string) {\n  try {\n    delete require.cache[realpathSync(filePath)]\n  } catch (e) {\n    if (e.code !== 'ENOENT') throw e\n  } finally {\n    delete require.cache[filePath]\n  }\n}\n\nconst PLUGIN_NAME = 'NextJsRequireCacheHotReloader'\n\n// This plugin flushes require.cache after emitting the files. Providing 'hot reloading' of server files.\nexport class NextJsRequireCacheHotReloader implements Plugin {\n  prevAssets: any = null\n  previousOutputPathsWebpack5: Set<string> = new Set()\n  currentOutputPathsWebpack5: Set<string> = new Set()\n\n  apply(compiler: Compiler) {\n    if (isWebpack5) {\n      // @ts-ignored Webpack has this hooks\n      compiler.hooks.assetEmitted.tap(\n        PLUGIN_NAME,\n        (_file: any, { targetPath }: any) => {\n          this.currentOutputPathsWebpack5.add(targetPath)\n          deleteCache(targetPath)\n        }\n      )\n\n      compiler.hooks.afterEmit.tap(PLUGIN_NAME, (compilation) => {\n        const runtimeChunkPath = path.join(\n          compilation.outputOptions.path,\n          'webpack-runtime.js'\n        )\n\n        deleteCache(runtimeChunkPath)\n\n        for (const outputPath of this.previousOutputPathsWebpack5) {\n          if (!this.currentOutputPathsWebpack5.has(outputPath)) {\n            deleteCache(outputPath)\n          }\n        }\n\n        this.previousOutputPathsWebpack5 = new Set(\n          this.currentOutputPathsWebpack5\n        )\n        this.currentOutputPathsWebpack5.clear()\n      })\n      return\n    }\n\n    compiler.hooks.afterEmit.tapAsync(PLUGIN_NAME, (compilation, callback) => {\n      const { assets } = compilation\n\n      if (this.prevAssets) {\n        for (const f of Object.keys(assets)) {\n          deleteCache(assets[f].existsAt)\n        }\n        for (const f of Object.keys(this.prevAssets)) {\n          if (!assets[f]) {\n            deleteCache(this.prevAssets[f].existsAt)\n          }\n        }\n      }\n      this.prevAssets = assets\n\n      callback()\n    })\n  }\n}\n"]}