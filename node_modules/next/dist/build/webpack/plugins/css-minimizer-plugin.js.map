{"version":3,"sources":["../../../../build/webpack/plugins/css-minimizer-plugin.ts"],"names":["CSS_REGEX","CssMinimizerPlugin","constructor","options","__next_css_remove","apply","compiler","hooks","compilation","tap","optimizeChunkAssets","tapPromise","chunks","Promise","all","reduce","acc","chunk","concat","files","filter","entry","test","map","file","postcssOptions","to","from","asset","assets","input","sourceAndMap","source","prev","then","res","SourceMapSource","css","toJSON","RawSource"],"mappings":"uEAAA,6CAEA,+CAEA;AACA,KAAMA,CAAAA,SAAS,CAAG,gBAAlB,CAQO,KAAMC,CAAAA,kBAAmB,CAK9BC,WAAW,CAACC,OAAD,CAAqC,MAJhDC,iBAIgD,CAJ5B,IAI4B,MAFxCD,OAEwC,QAC9C,KAAKA,OAAL,CAAeA,OAAf,CACD,CAEDE,KAAK,CAACC,QAAD,CAA6B,CAChCA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,oBAA/B,CAAsDD,WAAD,EAAsB,CACzEA,WAAW,CAACD,KAAZ,CAAkBG,mBAAlB,CAAsCC,UAAtC,CACE,oBADF,CAEGC,MAAD,EACEC,OAAO,CAACC,GAAR,CACEF,MAAM,CACHG,MADH,CAEI,CAACC,GAAD,CAAMC,KAAN,GAAgBD,GAAG,CAACE,MAAJ,CAAWD,KAAK,CAACE,KAAN,EAAe,EAA1B,CAFpB,CAGI,EAHJ,EAKGC,MALH,CAKWC,KAAD,EAAWrB,SAAS,CAACsB,IAAV,CAAeD,KAAf,CALrB,EAMGE,GANH,CAMQC,IAAD,EAAU,CACb,KAAMC,CAAAA,cAAc,CAAG,CACrB,GAAG,KAAKtB,OAAL,CAAasB,cADK,CAErBC,EAAE,CAAEF,IAFiB,CAGrBG,IAAI,CAAEH,IAHe,CAAvB,CAMA,KAAMI,CAAAA,KAAK,CAAGpB,WAAW,CAACqB,MAAZ,CAAmBL,IAAnB,CAAd,CAEA,GAAIM,CAAAA,KAAJ,CACA,GAAIL,cAAc,CAACF,GAAf,EAAsBK,KAAK,CAACG,YAAhC,CAA8C,CAC5C,KAAM,CAAEC,MAAF,CAAUT,GAAV,EAAkBK,KAAK,CAACG,YAAN,EAAxB,CACAD,KAAK,CAAGE,MAAR,CACAP,cAAc,CAACF,GAAf,CAAmBU,IAAnB,CAA0BV,GAAG,CAAGA,GAAH,CAAS,KAAtC,CACD,CAJD,IAIO,CACLO,KAAK,CAAGF,KAAK,CAACI,MAAN,EAAR,CACD,CAED,MAAO,2BAAOF,KAAP,CAAcL,cAAd,EAA8BS,IAA9B,CAAoCC,GAAD,EAAS,CACjD,GAAIA,GAAG,CAACZ,GAAR,CAAa,CACXf,WAAW,CAACqB,MAAZ,CAAmBL,IAAnB,EAA2B,GAAIY,gCAAJ,CACzBD,GAAG,CAACE,GADqB,CAEzBb,IAFyB,CAGzBW,GAAG,CAACZ,GAAJ,CAAQe,MAAR,EAHyB,CAA3B,CAKD,CAND,IAMO,CACL9B,WAAW,CAACqB,MAAZ,CAAmBL,IAAnB,EAA2B,GAAIe,0BAAJ,CAAcJ,GAAG,CAACE,GAAlB,CAA3B,CACD,CACF,CAVM,CAAP,CAWD,CAnCH,CADF,CAHJ,EA0CD,CA3CD,EA4CD,CAtD6B,C","sourcesContent":["import { process as minify } from 'cssnano-simple'\nimport webpack from 'webpack'\nimport { RawSource, SourceMapSource } from 'webpack-sources'\n\n// https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20\nconst CSS_REGEX = /\\.css(\\?.*)?$/i\n\ntype CssMinimizerPluginOptions = {\n  postcssOptions: {\n    map: false | { prev?: string | false; inline: boolean; annotation: boolean }\n  }\n}\n\nexport class CssMinimizerPlugin {\n  __next_css_remove = true\n\n  private options: CssMinimizerPluginOptions\n\n  constructor(options: CssMinimizerPluginOptions) {\n    this.options = options\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.compilation.tap('CssMinimizerPlugin', (compilation: any) => {\n      compilation.hooks.optimizeChunkAssets.tapPromise(\n        'CssMinimizerPlugin',\n        (chunks: webpack.compilation.Chunk[]) =>\n          Promise.all(\n            chunks\n              .reduce(\n                (acc, chunk) => acc.concat(chunk.files || []),\n                [] as string[]\n              )\n              .filter((entry) => CSS_REGEX.test(entry))\n              .map((file) => {\n                const postcssOptions = {\n                  ...this.options.postcssOptions,\n                  to: file,\n                  from: file,\n                }\n\n                const asset = compilation.assets[file]\n\n                let input: string\n                if (postcssOptions.map && asset.sourceAndMap) {\n                  const { source, map } = asset.sourceAndMap()\n                  input = source\n                  postcssOptions.map.prev = map ? map : false\n                } else {\n                  input = asset.source()\n                }\n\n                return minify(input, postcssOptions).then((res) => {\n                  if (res.map) {\n                    compilation.assets[file] = new SourceMapSource(\n                      res.css,\n                      file,\n                      res.map.toJSON()\n                    )\n                  } else {\n                    compilation.assets[file] = new RawSource(res.css)\n                  }\n                })\n              })\n          )\n      )\n    })\n  }\n}\n"]}