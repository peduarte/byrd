{"version":3,"sources":["../../../../../../../build/webpack/config/blocks/css/loaders/modules.ts"],"names":["getCssModuleLoader","ctx","postCssPlugins","preProcessors","loaders","isClient","push","isDevelopment","assetPrefix","loader","require","resolve","options","importLoaders","length","sourceMap","onlyLocals","isServer","modules","mode","getLocalIdent","getCssModuleLocalIdent","ident","plugins","slice","reverse"],"mappings":"mFAGA,gCACA,gEAEO,QAASA,CAAAA,kBAAT,CACLC,GADK,CAELC,cAFK,CAGLC,aAAgD,CAAG,EAH9C,CAIqB,CAC1B,KAAMC,CAAAA,OAAiC,CAAG,EAA1C,CAEA,GAAIH,GAAG,CAACI,QAAR,CAAkB,CAChB;AACA;AACAD,OAAO,CAACE,IAAR,CACE,iCAAqB,CACnBC,aAAa,CAAEN,GAAG,CAACM,aADA,CAEnBC,WAAW,CAAEP,GAAG,CAACO,WAFE,CAArB,CADF,EAMD,CAED;AACAJ,OAAO,CAACE,IAAR,CAAa,CACXG,MAAM,CAAEC,OAAO,CAACC,OAAR,CAAgB,YAAhB,CADG,CAEXC,OAAO,CAAE,CACPC,aAAa,CAAE,EAAIV,aAAa,CAACW,MAD1B,CAEPC,SAAS,CAAE,IAFJ,CAGPC,UAAU,CAAEf,GAAG,CAACgB,QAHT,CAIPC,OAAO,CAAE,CACP;AACA;AACAC,IAAI,CAAE,MAHC,CAIP;AACA;AACA;AACA;AACA;AACAC,aAAa,CAAEC,8CATR,CAJF,CAFE,CAAb,EAoBA;AACAjB,OAAO,CAACE,IAAR,CAAa,CACXG,MAAM,CAAEC,OAAO,CAACC,OAAR,CAAgB,mCAAhB,CADG,CAEXC,OAAO,CAAE,CACPU,KAAK,CAAE,kBADA,CAEPC,OAAO,CAAErB,cAFF,CAGPa,SAAS,CAAE,IAHJ,CAFE,CAAb,EASAX,OAAO,CAACE,IAAR,CACE;AACA;AACA,GAAGH,aAAa,CAACqB,KAAd,GAAsBC,OAAtB,EAHL,EAMA,MAAOrB,CAAAA,OAAP,CACD","sourcesContent":["import postcss from 'postcss'\nimport webpack from 'webpack'\nimport { ConfigurationContext } from '../../../utils'\nimport { getClientStyleLoader } from './client'\nimport { getCssModuleLocalIdent } from './getCssModuleLocalIdent'\n\nexport function getCssModuleLoader(\n  ctx: ConfigurationContext,\n  postCssPlugins: readonly postcss.AcceptedPlugin[],\n  preProcessors: readonly webpack.RuleSetUseItem[] = []\n): webpack.RuleSetUseItem[] {\n  const loaders: webpack.RuleSetUseItem[] = []\n\n  if (ctx.isClient) {\n    // Add appropriate development more or production mode style\n    // loader\n    loaders.push(\n      getClientStyleLoader({\n        isDevelopment: ctx.isDevelopment,\n        assetPrefix: ctx.assetPrefix,\n      })\n    )\n  }\n\n  // Resolve CSS `@import`s and `url()`s\n  loaders.push({\n    loader: require.resolve('css-loader'),\n    options: {\n      importLoaders: 1 + preProcessors.length,\n      sourceMap: true,\n      onlyLocals: ctx.isServer,\n      modules: {\n        // Disallow global style exports so we can code-split CSS and\n        // not worry about loading order.\n        mode: 'pure',\n        // Generate a friendly production-ready name so it's\n        // reasonably understandable. The same name is used for\n        // development.\n        // TODO: Consider making production reduce this to a single\n        // character?\n        getLocalIdent: getCssModuleLocalIdent,\n      },\n    },\n  })\n\n  // Compile CSS\n  loaders.push({\n    loader: require.resolve('next/dist/compiled/postcss-loader'),\n    options: {\n      ident: '__nextjs_postcss',\n      plugins: postCssPlugins,\n      sourceMap: true,\n    },\n  })\n\n  loaders.push(\n    // Webpack loaders run like a stack, so we need to reverse the natural\n    // order of preprocessors.\n    ...preProcessors.slice().reverse()\n  )\n\n  return loaders\n}\n"]}