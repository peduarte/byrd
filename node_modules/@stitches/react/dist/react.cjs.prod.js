"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var core = require("@stitches/core"), React = require("react");

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _iterableToArrayLimit(arr, i) {
  if ("undefined" != typeof Symbol && Symbol.iterator in Object(arr)) {
    var _arr = [], _n = !0, _d = !1, _e = void 0;
    try {
      for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), 
      !i || _arr.length !== i); _n = !0) ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        _n || null == _i.return || _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _typeof(obj) {
  return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  })(obj);
}

function _objectWithoutProperties(source, excluded) {
  if (null == source) return {};
  var key, i, target = _objectWithoutPropertiesLoose(source, excluded);
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) key = sourceSymbolKeys[i], excluded.indexOf(key) >= 0 || Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (null == source) return {};
  var key, i, target = {}, sourceKeys = Object.keys(source);
  for (i = 0; i < sourceKeys.length; i++) key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
  return target;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

function _defineProperty(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value: value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (o) {
    if ("string" == typeof o) return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    return "Object" === n && o.constructor && (n = o.constructor.name), "Map" === n || "Set" === n ? Array.from(o) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? _arrayLikeToArray(o, minLen) : void 0;
  }
}

function _iterableToArray(iter) {
  if ("undefined" != typeof Symbol && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  (null == len || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

var createCompoundVariantsMatcher = function(breakPoints, existingMap) {
  var map = new Map;
  return map.set(core.MAIN_BREAKPOINT_ID, _toConsumableArray((null == existingMap ? void 0 : existingMap.get(core.MAIN_BREAKPOINT_ID)) || [])), 
  Object.keys(breakPoints).forEach((function(breakpoint) {
    return map.set(breakpoint, _toConsumableArray((null == existingMap ? void 0 : existingMap.get(breakpoint)) || []));
  })), map;
}, createStyled = function(config) {
  var currentAs, css = core.createCss(config), Box = React.forwardRef((function(props, ref) {
    var Element = props.as || "div";
    return React.createElement(Element, _objectSpread(_objectSpread({
      ref: ref
    }, props), {}, {
      as: void 0
    }));
  })), configBreakpoints = config.breakpoints || {}, styledInstance = function() {
    var baseAndVariantStyles = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function(cssComposer) {
      return cssComposer.compose();
    }, Component = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Box, numberOfCompoundVariants = 0, as = currentAs, _baseAndVariantStyles = baseAndVariantStyles.variants, variants = void 0 === _baseAndVariantStyles ? {} : _baseAndVariantStyles, base = _objectWithoutProperties(baseAndVariantStyles, [ "variants" ]), baseStyles = css(base), compoundVariants = [], requiredMatches = createCompoundVariantsMatcher(configBreakpoints), evaluatedVariantMap = new Map, evaluatedCompoundVariants = new Map;
    for (var Name in variants) {
      var variantMap = new Map;
      for (var ValueName in variants[Name]) {
        var evaluatedStyles = evaluateStylesForAllBreakpoints(variants[Name][ValueName], configBreakpoints, css);
        variantMap.set(ValueName, evaluatedStyles);
      }
      evaluatedVariantMap.set(Name, variantMap);
    }
    var stitchesComponentId = "scid-".concat(core.hashString(JSON.stringify(baseAndVariantStyles))), StitchesComponent = React.forwardRef((function(props, ref) {
      var compositions = [ baseStyles ], propsWithoutVariantsAndCssProp = {}, compoundRequiredMatches = createCompoundVariantsMatcher(configBreakpoints, requiredMatches), numberOfUnResolvedCompoundVariants = {
        current: numberOfCompoundVariants
      }, _loop = function(_key) {
        _key in variants ? function() {
          var evaluatedVariant = evaluatedVariantMap.get(_key), keyVal = props[_key] && "object" !== _typeof(props[_key]) ? _defineProperty({}, core.MAIN_BREAKPOINT_ID, props[_key]) : props[_key], _loop2 = function(breakpoint) {
            var _evaluatedVariant$get;
            keyVal[breakpoint] && evaluatedVariant && evaluatedVariant.get(String(keyVal[breakpoint])) && compositions.push(null === (_evaluatedVariant$get = evaluatedVariant.get(String(keyVal[breakpoint]))) || void 0 === _evaluatedVariant$get ? void 0 : _evaluatedVariant$get[breakpoint]);
            numberOfUnResolvedCompoundVariants.current && compoundVariants.forEach((function(compoundVariant, i) {
              var _evaluatedCompoundVar;
              (String(keyVal[breakpoint]) === String(compoundVariant[_key]) && compoundRequiredMatches.get(breakpoint)[i]--, 
              0 === compoundRequiredMatches.get(breakpoint)[i]) && (numberOfUnResolvedCompoundVariants.current--, 
              compositions.push(null === (_evaluatedCompoundVar = evaluatedCompoundVariants.get(compoundVariant)) || void 0 === _evaluatedCompoundVar ? void 0 : _evaluatedCompoundVar[breakpoint]));
            }));
          };
          for (var breakpoint in keyVal) _loop2(breakpoint);
        }() : propsWithoutVariantsAndCssProp[_key] = props[_key];
      };
      for (var _key in props) _loop(_key);
      return propsWithoutVariantsAndCssProp.css && (compositions.push(propsWithoutVariantsAndCssProp.css), 
      propsWithoutVariantsAndCssProp.css = void 0), React.createElement(Component, _objectSpread(_objectSpread({}, propsWithoutVariantsAndCssProp), {}, {
        as: props.as || as,
        ref: ref,
        className: css.apply(void 0, [ stitchesComponentId ].concat(compositions, [ props.className ]))
      }));
    }));
    return StitchesComponent.displayName = "string" == typeof currentAs ? "styled(".concat(currentAs, ")") : Component && Component.displayName ? "styled(".concat(Component.displayName, ")") : "styled(Component)", 
    StitchesComponent.toString = function() {
      return ".".concat(stitchesComponentId);
    }, StitchesComponent.compoundVariant = function(compundVariantsObject, compoundVariantStyles) {
      numberOfCompoundVariants++, compoundVariants.push(compundVariantsObject), requiredMatches.forEach((function(value, key) {
        value.push(Object.keys(compundVariantsObject).length);
      }));
      var evaluatedStyles = evaluateStylesForAllBreakpoints(compoundVariantStyles, configBreakpoints, css);
      return evaluatedCompoundVariants.set(compundVariantsObject, evaluatedStyles), StitchesComponent;
    }, StitchesComponent;
  };
  return {
    styled: new Proxy((function() {}), {
      get: function(_, prop) {
        return "Box" === prop ? Box : (currentAs = String(prop), styledInstance);
      },
      apply: function(_, __, _ref2) {
        var _ref3 = _slicedToArray(_ref2, 2), Element = _ref3[0], styling = _ref3[1];
        return "string" == typeof Element ? (currentAs = Element, styledInstance(styling)) : (currentAs = void 0, 
        styledInstance(styling, Element));
      }
    }),
    css: css
  };
};

function evaluateStylesForAllBreakpoints(styleObject, configBreakpoints, css) {
  var breakpoints = _defineProperty({}, core.MAIN_BREAKPOINT_ID, css(styleObject));
  if (configBreakpoints) for (var breakpoint in configBreakpoints) breakpoints[breakpoint] = css(_defineProperty({}, breakpoint, styleObject));
  return breakpoints;
}

Object.defineProperty(exports, "_ATOM", {
  enumerable: !0,
  get: function() {
    return core._ATOM;
  }
}), exports.createStyled = createStyled;
